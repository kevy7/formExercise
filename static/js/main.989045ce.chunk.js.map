{"version":3,"sources":["Components/Modals/Modal.js","Components/Inputs/MoneyInput/MoneyInput.js","Components/Inputs/CardInput/CardInput.js","Components/Inputs/DateInput/DateInput.js","Validators/validate.js","CustomHooks/useInput.js","Actions/index.js","Validators/validators.js","Components/Forms/CreditCardForm/CreditCardForm.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","className","data-testid","onClick","displayModal","MoneyInput","label","type","placeholder","name","value","onChange","onBlur","CardInput","cardType","pattern","maxLength","htmlFor","id","changeCardType","DateInput","month","changeMonth","onBlurMonth","year","changeYear","onBlurYear","validate","validators","fieldName","fieldVal","error","a","length","useInput","initialV","useState","setValue","setError","resetValue","event","target","postPayment","paymentInfo","axios","post","validateIsEmpty","trim","validateMonth","validateYear","validateNumbers","test","validateUSNumbers","CreditCardForm","amount","resetAmount","changeAmount","amountErr","onBlurAmount","cardNumber","resetCardNumber","changeCardNumber","cardNumberErr","onBlurCardNumber","resetMonth","monthErr","resetYear","yearErr","showModal","setShowModal","onSubmit","e","preventDefault","title","body","userId","then","response","disabled","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.989045ce.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Modal.scss';\n\nconst Modal = (props) => {\n    const handleClick = () => {\n        props.displayModal(false);\n    }\n\n    return (\n        <div className=\"modal\" data-testid=\"modal\">\n            <div className=\"modal-body\">\n                <span className=\"modal-body-closebtn\" onClick={handleClick}>X</span>\n                <p>Success: Payment was made! Thanks for your purchase!</p>\n            </div>\n        </div>\n    )\n}\n\nModal.propTypes = {\n    displayModal: PropTypes.func,\n}\n\nexport default Modal;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MoneyInput.scss';\n\nconst MoneyInput = (props) => {\n    return (\n        <div className=\"input-container\">\n            <div className=\"input-label\">\n                <label data-testid=\"money-label\">{props.label}</label>\n            </div>\n            <input \n                className=\"input\" \n                type=\"text\" \n                placeholder={props.placeholder} \n                name={props.name}\n                value={props.value}\n                onChange={props.onChange}\n                onBlur={props.onBlur}\n                data-testid=\"money-input\"\n            />\n        </div>\n    )\n}\n\nMoneyInput.propTypes = {\n    label: PropTypes.string,\n    placeholder: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n}\n\nexport default MoneyInput;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CardInput.scss';\n\nconst CardInput = (props) => {\n    //the purpose of this object is to style your card-input based on the\n    //user's selected card type\n    const cardTypeClasses = {\n        \"4\": \"card-type-visa-and-master\",\n        \"5\": \"card-type-visa-and-master\",\n        \"34\": \"card-type-amex\",\n        \"36\": \"card-type-amex\",\n        \"6011\": \"card-type-discover\"\n    }\n\n    return (\n        <div className=\"card-input-container\">\n            <span className=\"input-field-container\">\n                <div className=\"input-label\">\n                    <label>{props.label}</label>\n                </div>\n                <span className=\"card-icon\">{props.cardType}</span>\n                <input \n                    className={`card-input ${ cardTypeClasses[props.cardType] }`}\n                    type=\"text\" \n                    placeholder={props.placeholder}\n                    pattern=\"\\d*\" \n                    maxLength=\"16\"\n                    name={props.name}\n                    value={props.value}\n                    onChange={props.onChange}\n                    onBlur={props.onBlur}\n                    data-testid=\"card-input\"\n                />\n            </span>\n\n            {/* component added to allow user to select their credit card type */}\n            <span className=\"card-selection-container\">\n                <label className=\"card-type-label\" htmlFor=\"card-type\">Card Type</label>\n\n                <select \n                    className=\"card-type-selection\" \n                    name=\"card-types\" \n                    id=\"card-types\"\n                    onChange={props.changeCardType}\n                >\n                    <option value=\"4\">Visa</option>\n                    <option value=\"5\">Master</option>\n                    <option value=\"34\">Amex (34)</option>\n                    <option value=\"36\">Amex (36)</option>\n                    <option value=\"6011\">Discover</option>\n                </select>\n            </span>\n        </div>\n    )\n}\n\nCardInput.propTypes = {\n    label: PropTypes.string,\n    placeholder: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    cardType: PropTypes.string,\n    changeCardType: PropTypes.func,\n}\n\nexport default CardInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DateInput.scss';\n\nconst DateInput = (props) => {\n    return (\n        <div className=\"date-input-container\">\n            {/* <label className=\"label\">MM</label> */}\n            <div>\n                <div className=\"label\">\n                    <label>Month</label>\n                </div>\n                <input \n                    className=\"input month-input\" \n                    type=\"text\" \n                    pattern=\"\\d*\"\n                    maxLength=\"2\"\n                    name=\"Month\"\n                    value={props.month}\n                    onChange={props.changeMonth}\n                    onBlur={props.onBlurMonth}\n                    data-testid=\"month-input\"\n                />\n\n            </div>\n                \n            <div>\n                <div className=\"label\">\n                    <label>Year</label>\n                </div>\n                <input \n                    className=\"input year-input\" \n                    type=\"text\"\n                    pattern=\"\\d*\"\n                    maxLength=\"4\"\n                    name=\"Year\"\n                    value={props.year}\n                    onChange={props.changeYear}\n                    onBlur={props.onBlurYear}\n                    data-testid=\"year-input\"\n                />\n            </div>\n\n        </div>\n    )\n}\n\nDateInput.propTypes = {\n    month: PropTypes.string,\n    changeMonth: PropTypes.func,\n    year: PropTypes.string,\n    changeYear: PropTypes.func,\n    onBlurMonth: PropTypes.func,\n    onBlurYear: PropTypes.func,\n}\n\nexport default DateInput;","//The purpose of this function is to validate a user's form\n//for the first argument, you pass in a list of validators for an input field\n//for example, if we were validating the amount field, we would pass in the following validators\n//check for only numbers, no negative numbers.\n//this function returns either an error or null. null is returned if there are no errors.\n\nconst validate = (validators, fieldName, fieldVal) => {\n\n    let error = null; //return an error if it was found, else return null\n\n    //loop through and execute each validator\n    for(let a = 0; a < validators.length; a ++){\n        if(error === null){\n            error = validators[a](fieldName, fieldVal); //check if there is an error for the following value\n        }\n        else {\n            //break out of loop once an error is identified\n            break; //break out from loop once we found an error.\n        }\n    }\n\n    return error;\n}\n\nexport default validate;","import { useState } from 'react';\nimport validate from '../Validators/validate';\n\nexport const useInput = (initialV, validators) => {\n    const [value, setValue] = useState(initialV);\n    //every input may have an error based on validation. If not error, then the error state should be null.\n    const [error, setError] = useState(null);\n\n    return {\n        value,\n        setValue,\n        error,\n        setError,\n        resetValue: () => setValue(\"\"),\n        onChange: event => {\n            let fieldName = event.target.name;\n            let fieldVal = event.target.value;\n            //validate this field based on the list of validators that is passed in\n            if(validators.length){\n                setError(validate(validators, fieldName, fieldVal));\n            }\n            setValue(event.target.value);\n        },\n        onBlur: event => {\n            let fieldName = event.target.name;\n            let fieldVal = event.target.value;\n            //validate this field based on the list of validators that is passed in\n            if(validators.length){\n                setError(validate(validators, fieldName, fieldVal));\n            }\n        }\n    }\n}","import axios from 'axios';\n\n//fake post request\nexport const postPayment = async (paymentInfo) => {\n    return axios.post(\"https://jsonplaceholder.typicode.com/posts\", paymentInfo)\n    // .then(userData => {\n    //     // response = userData;\n    //     // console.log(userData);\n    //  return userData;\n\n    // })\n    // .catch(err => {\n\n    // })\n}","//contains a list of validators that we will use to validate an input field\n//each validator should accept a value as an arugment\n\n//checks if field is empty\nexport const validateIsEmpty = (fieldName, fieldVal) => {\n    if(fieldVal.trim() === ''){\n        return fieldName + \" is a required field.\"\n    }\n    return null;\n}\n\n//check if card number digits is less than 16\nexport const validateCardNumberDigits = (fieldName, fieldVal) => {\n    if(fieldVal.trim().length < 13){\n        return fieldName + \" must be at least 13 digits.\"\n    }\n    return null;\n}\n\n//check if month is valid\nexport const validateMonth = (fieldName, fieldVal) => {\n\n    //check if month is 2 digits, it must follow the format mm\n    if(fieldVal.trim().length !== 2){\n        return fieldName + \" must follow the format: MM.\"\n    }\n\n    if(fieldVal > 12 || fieldVal < 0){\n        return fieldName + \" is not a valid month number.\"\n    }\n\n    return null;\n}\n\n//check if the year is valid\nexport const validateYear = (fieldName, fieldVal) => {\n    //check if year is 4 digits, it must follow the format YYYY\n    if(fieldVal.trim().length !== 4){\n        return fieldName + \" must follow the format: YYYY.\"\n    }\n\n    return null;\n}\n\n//check if fieldVal contains any characters, if it does return an error\nexport const validateNumbers = (fieldName, fieldVal) => {\n\n    ///^\\d+$/ is a regular expression used to check for only digits\n    if(/^\\d+$/.test(fieldVal) === false){\n        return fieldName + \" can only contain numbers.\"\n    }\n\n    return null;\n}\n\nexport const validateUSNumbers = (fieldName, fieldVal) => {\n\n    //below is a regular expression used to check for valid U.S. digits\n    if(/^(\\d{1,3}(\\,\\d{3})*|(\\d+))(\\.\\d{2})?$/.test(fieldVal) === false){\n        return fieldName + \" can only be in US currency format.\"\n    }\n\n    return null;\n}","import react, { useState } from 'react';\n\nimport Modal from '../../Modals/Modal';\nimport MoneyInput from '../../Inputs/MoneyInput/MoneyInput';\nimport CardInput from '../../Inputs/CardInput/CardInput';\nimport DateInput from '../../Inputs/DateInput/DateInput';\n//custom hook created for this form\nimport { useInput } from '../../../CustomHooks/useInput';\n//our api call\nimport { postPayment } from '../../../Actions';\n\n//validation\nimport {\n    validateIsEmpty, //check if field is empty\n    validateCardNumberDigits, //validates if card number is exactly 16 digits\n    validateMonth, //validate if input is a valid month\n    validateYear, //validate if inout is a valid year\n    validateNumbers, //validates if field contains only numbers\n    validateUSNumbers, //check if field value matches US currency format\n} from '../../../Validators/validators';\n\n//import styling\nimport './CreditCardForm.scss';\nimport '../../Inputs/Inputs.scss';\n\nlet CreditCardForm = () => {\n    //initialize our state with useInput\n    const { \n        value:amount, \n        resetValue:resetAmount, \n        onChange:changeAmount, \n        error: amountErr,\n        onBlur: onBlurAmount\n    } = useInput('', [validateIsEmpty, validateUSNumbers]);\n    const { \n        value:cardNumber, \n        resetValue:resetCardNumber, \n        onChange:changeCardNumber,\n        error: cardNumberErr,\n        onBlur: onBlurCardNumber\n    } = useInput('', [validateIsEmpty, validateNumbers, /*validateCardNumberDigits*/]);\n    const { \n        value:month, \n        resetValue:resetMonth, \n        onChange:changeMonth ,\n        error: monthErr,\n        onBlur: onBlurMonth\n    } = useInput('', [validateIsEmpty, validateNumbers, validateMonth]);\n    const { \n        value:year,\n        resetValue:resetYear, \n        onChange:changeYear,\n        error: yearErr,\n        onBlur: onBlurYear\n    } = useInput('', [validateIsEmpty, validateNumbers, validateYear]);\n    const {\n        value:cardType,\n        onChange:changeCardType,\n    } = useInput('4', []);\n\n    const [showModal, setShowModal] = useState(false); // if this is set to true, then show the modal for the user\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        //fake data, we will be sent to the api route below\n        let paymentInfo = {\n            title: amount,\n            body: cardType + cardNumber, \n            userId: month + \"/\" + year,\n        }\n        //postPayment will return a promise\n        postPayment(paymentInfo).then(response => {\n            //after the post request is done, reset the state for your form\n            resetAmount();\n            resetCardNumber();\n            resetMonth();\n            resetYear();\n            //show modal after a sucessfull submit\n            setShowModal(true);\n        })\n    }\n\n    return (\n        <div className=\"form-container\">\n            {(showModal && <Modal displayModal={setShowModal}/>)}\n            {/* <Modal displayModal={setShowModal}/> */}\n            <h2>Payment Form</h2>\n            <form onSubmit={handleSubmit} className=\"credit-card-form\">\n                <MoneyInput \n                    label=\"Amount\"\n                    value={amount}\n                    name=\"Amount\"\n                    onChange={changeAmount}\n                    onBlur={onBlurAmount}\n                />\n                {(amountErr!==null && <p className=\"err-display\" data-testid=\"err-display\">{amountErr}</p>)}\n                \n                <CardInput \n                    label=\"Credit Card Number\"\n                    name=\"Card Number\"\n                    value={cardNumber}\n                    onChange={changeCardNumber}\n                    onBlur={onBlurCardNumber}\n                    cardType={cardType}\n                    changeCardType={changeCardType}\n                />\n                {(cardNumberErr!==null && <p className=\"err-display\" data-testid=\"err-display\">{cardNumberErr}</p>)}\n\n                <DateInput\n                    month={month}\n                    changeMonth={changeMonth}\n                    year={year}\n                    changeYear={changeYear}\n                    onBlurMonth={onBlurMonth}\n                    onBlurYear={onBlurYear}\n                />\n                \n                {(monthErr!==null && <p className=\"err-display\" data-testid=\"err-display\">{monthErr}</p>)}\n                {(yearErr!==null && <p className=\"err-display\" data-testid=\"err-display\">{yearErr}</p>)}\n\n                <div className=\"form-btn-wrapper\">\n                    <input \n                        disabled={ \n                            //disable the button if there are errors in your input fields\n                            //also, disable the button if all fields are empty\n                            amountErr===null &&\n                            cardNumberErr===null &&\n                            monthErr===null &&\n                            yearErr===null &&\n                            amount !== '' &&\n                            cardNumber !== '' &&\n                            month !== '' &&\n                            year !== ''\n                            ? false : true\n                        } \n                        className=\"form-btn\" \n                        type=\"submit\" \n                        value=\"Submit\"\n                        data-testid=\"Submit-Form\"\n                    />\n                </div>\n\n            </form>\n        </div>\n    )\n}\n\nexport default CreditCardForm;","import './App.scss';\nimport CreditCardForm from \"./Components/Forms/CreditCardForm/CreditCardForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\" data-testid=\"App-Container\">\n      <CreditCardForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}